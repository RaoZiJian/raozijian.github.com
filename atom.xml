<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ken_Rao's blog]]></title>
  <link href="http://RaoZiJian.github.io/atom.xml" rel="self"/>
  <link href="http://RaoZiJian.github.io/"/>
  <updated>2014-09-11T11:21:22+08:00</updated>
  <id>http://RaoZiJian.github.io/</id>
  <author>
    <name><![CDATA[RaoZiJian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cocos2d-x 网络Http篇]]></title>
    <link href="http://RaoZiJian.github.io/blog/2014/09/10/blog-2/"/>
    <updated>2014-09-10T10:22:52+08:00</updated>
    <id>http://RaoZiJian.github.io/blog/2014/09/10/blog-2</id>
    <content type="html"><![CDATA[<p>谈到Cocos2d-x中的Http网络编程，它的基本流程是:</p>

<ol>
<li>创建HttpRequest</li>
<li>创建setResponseCallback()回调函数来设置如何对请求回复后的信息进行操作</li>
<li>通过HttpClient发送HttpRequest请求</li>
</ol>


<p>因此，你首先要知道3个类:</p>

<ul>
<li>HttpRequest</li>
<li>HttpResponse</li>
<li>HttpClient</li>
</ul>


<p>了解了它们之后再来看引擎<code>cpp-test</code>中的<code>cpp-test/Classes/ExtensionsTest/NetworkTest/HttpClientTest</code>，就能对Cocos2d-x中Http的用法基本了解了。</p>

<!-- more -->


<h2>HttpRequest</h2>

<p>顾名思义，它将处理向Http的发出请求，即将用户的请求内容信息给封装到HttpRequest对象当中。目前的话，支持以下几种类型的HttpRequest</p>

<pre><code>/** Use this enum type as param in setReqeustType(param) */
enum class Type
{
    GET,
    POST,
    PUT,
    DELETE,
    UNKNOWN,
};
</code></pre>

<p>其中UNKNOWN类型是它的初始化默认类型，这个在它的构造函数中可以看到，需要注意的是，由于线程不安全的问题，不要将<code>HttpRequest</code>放到自动回收池当中去，这可能会导致崩溃。</p>

<pre><code>/** Constructor
    Because HttpRequest object will be used between UI thead and network thread,
    requestObj-&gt;autorelease() is forbidden to avoid crashes in AutoreleasePool
    new/retain/release still works, which means you need to release it manually
    Please refer to HttpRequestTest.cpp to find its usage
 */
HttpRequest()
{
    _requestType = Type::UNKNOWN;
    _url.clear();
    _requestData.clear();
    _tag.clear();
    _pTarget = nullptr;
    _pSelector = nullptr;
    _pCallback = nullptr;
    _pUserData = nullptr;
};
</code></pre>

<p>通过这个构造函数，我们也可以看到HttpRequest的一些属性，这些protected的属性在HttpRequest中的定义如下，可以通过注释来简单的了解下它们的作用。</p>

<pre><code>protected:
 // properties
    Type                        _requestType;    /// kHttpRequestGet, kHttpRequestPost or other enums
    std::string                 _url;            /// target url that this request is sent to
    std::vector&lt;char&gt;           _requestData;    /// used for POST
    std::string                 _tag;            /// user defined tag, to identify different requests in response callback
    Ref*                        _pTarget;        /// callback target of pSelector function
    SEL_HttpResponse            _pSelector;      /// callback function, e.g. MyLayer::onHttpResponse(HttpClient *sender, HttpResponse * response)
    ccHttpRequestCallback       _pCallback;      /// C++11 style callbacks
    void*                       _pUserData;      /// You can add your customed data here 
    std::vector&lt;std::string&gt;    _headers;             /// custom http headers
</code></pre>

<p>这些属性中，<code>_requestType</code>，<code>_url</code>，<code>_requestData</code>，<code>_tag</code>，<code>_pTarget</code>，<code>_headers</code>都有get/set方法可以找到，这些也是比较常用到的属性。</p>

<p><code>_pSelector</code>指的是发送请求后的回调函数，<code>_pTarget</code>是它的回调函数的作用对象，如下所示：</p>

<pre><code>CC_DEPRECATED_ATTRIBUTE inline void setResponseCallback(Ref* pTarget, SEL_HttpResponse pSelector)
{
    _pTarget = pTarget;
    _pSelector = pSelector;

    if (_pTarget)
    {
        _pTarget-&gt;retain();
    }
}
</code></pre>

<p>可以看到，目前旧的<code>setResponseCallback</code>已经被废弃了，这是现在由于我们有了新的支持C++11类型的回调函数，现在这个回调函数将指向<code>_pCallback</code>，它是一个<code>ccHttpRequestCallback</code>类，它的定义如下：</p>

<pre><code>typedef std::function&lt;void(HttpClient* client, HttpResponse* response)&gt; ccHttpRequestCallback;
</code></pre>

<p><code>_pCallback</code>在HttpRequest类中担任发送请求后接受的回调函数的责任，它仍然叫做<code>setResponseCallback</code>但是已经是C++11类型的回调函数了:</p>

<pre><code>inline void setResponseCallback(const ccHttpRequestCallback&amp; callback)
{
    _pCallback = callback;
}
</code></pre>

<p>OK!<code>HttpRequest</code>的类的属性和接口的用法和含义大致上就是这样。</p>

<h2>HttpResponse</h2>

<p>与HttpRequest相反，HttpResponse存储Http服务器返回的请求，因此它并不需要由用户创建，它将由HttpClient创建并返回，用户只需要知道如何去处理它返回的信息即可。</p>

<p>它的一些基本属性:</p>

<pre><code>protected:
    bool initWithRequest(HttpRequest* request);

    // properties
    HttpRequest*        _pHttpRequest;  /// the corresponding HttpRequest pointer who leads to this response 
    bool                _succeed;       /// to indecate if the http reqeust is successful simply
    std::vector&lt;char&gt;   _responseData;  /// the returned raw data. You can also dump it as a string
    std::vector&lt;char&gt;   _responseHeader;  /// the returned raw header data. You can also dump it as a string
    long                _responseCode;    /// the status code returned from libcurl, e.g. 200, 404
    std::string         _errorBuffer;   /// if _responseCode != 200, please read _errorBuffer to find the reason 
</code></pre>

<p>其中<code>initWithRequest</code>只在内部调用的时候需要用到，用户不需要关心。<code>_pHttpRequest</code>可以通过<code>getHttpRequest()</code>来获得它对用的HttpRequest请求对象，<code>_succeed</code>可以通过<code>isSucceed</code>接口来判定是否请求成功。其余的属性均有get/set方法来获得进行操作。</p>

<h2>HttpClient</h2>

<p>HttpClient是一个单例，它控制着HttpRequest和HttpResponse的收发传递。它有一些公共接口，其中最重要的可能就是对请求的发送了，当然在这之前你得先获得这个单例对象：</p>

<pre><code>/** Return the shared instance **/
static HttpClient *getInstance();

/** Relase the shared instance **/
static void destroyInstance();
/**
 * Add a get request to task queue
 * @param request a HttpRequest object, which includes url, response callback etc.
                  please make sure request-&gt;_requestData is clear before calling "send" here.
 */
void send(HttpRequest* request);

/**
 * Immediate send a request
 * @param request a HttpRequest object, which includes url, response callback etc.
                  please make sure request-&gt;_requestData is clear before calling "sendImmediate" here.
 */
void sendImmediate(HttpRequest* request);
</code></pre>

<p>在这里，<code>send</code>和<code>sendImmediate</code>的区别在于，前者会将HttpRequest排到到request的队列线程的最后，后者则会立刻新建一个线程后发送。除此之外，它还有一些接口对应其它的用途。如<code>get/setTimeoutForConnect</code>可以get/set连接的超时时间，<code>get/setTimeoutForRead</code>可以get/set下载的超时时间。</p>

<h2>HttpClientTest</h2>

<p>在了解了相关的3个类之后，我相信现在大部分内容你应该已经了解了，现在来看一下cpp-test中的http流程是怎么写的，你就基本上大致了解它的使用过程了。更多的内容，可以在<code>cpp-test/Classes/ExtensionsTest/NetworkTest/HttpClientTest</code>看到</p>

<pre><code>void HttpClientTest::onMenuDeleteTestClicked(Ref *sender, bool isImmediate)    // test 1
    {
        HttpRequest* request = new (std::nothrow) HttpRequest();
        request-&gt;setUrl("http://just-make-this-request-failed.com");
        request-&gt;setRequestType(HttpRequest::Type::GET);
        request-&gt;setResponseCallback(CC_CALLBACK_2(HttpClientTest::onHttpRequestCompleted, this));
        if (isImmediate)
        {
            request-&gt;setTag("GET immediate test1");
            HttpClient::getInstance()-&gt;sendImmediate(request);
        }else
        {
            request-&gt;setTag("GET test1");
            HttpClient::getInstance()-&gt;send(request);
        }
        request-&gt;release();
    }
    }
</code></pre>

<p>上面的代码，创建了一个HttpRequest的对象，设置了它的一些信息：Url，RequestType，ResponseCallback的回调和tag。接着通过HttpClient将这个请求发送出去，在这里它通过一个<code>isImmediate</code>来判断它是否是立刻发送。最后由于是new出来的对象，它又手动release了一遍。下面的代码展示了这个请求结束后的回调函数。</p>

<pre><code>void HttpClientTest::onHttpRequestCompleted(HttpClient *sender, HttpResponse *response)
{
    if (!response)
    {
        return;
    }

    // You can get original request type from: response-&gt;request-&gt;reqType
    if (0 != strlen(response-&gt;getHttpRequest()-&gt;getTag())) 
    {
        log("%s completed", response-&gt;getHttpRequest()-&gt;getTag());
    }

    long statusCode = response-&gt;getResponseCode();
    char statusString[64] = {};
    sprintf(statusString, "HTTP Status Code: %ld, tag = %s", statusCode, response-&gt;getHttpRequest()-&gt;getTag());
    _labelStatusCode-&gt;setString(statusString);
    log("response code: %ld", statusCode);

    if (!response-&gt;isSucceed()) 
    {
        log("response failed");
        log("error buffer: %s", response-&gt;getErrorBuffer());
        return;
    }

    // dump data
    std::vector&lt;char&gt; *buffer = response-&gt;getResponseData();
    log("Http Test, dump data: ");
    for (unsigned int i = 0; i &lt; buffer-&gt;size(); i++)
    {
        log("%c", (*buffer)[i]);
    }
    log("\n");
    if (response-&gt;getHttpRequest()-&gt;getReferenceCount() != 2)
    {
        log("request ref count not 2, is %d", response-&gt;getHttpRequest()-&gt;getReferenceCount());
    }
}
</code></pre>

<p>这段函数中，处理了请求之后返回的HttpReponse对象的数据，并将对应信息一一打印。</p>

<h2>安卓</h2>

<p>需要注意的是，如果你是Android环境，不要忘了在您的应用程序的Manifest中增加相应的权限：</p>

<pre><code>&lt;uses-permission android:name=”android.permission.INTERNET” /&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cocos2d-x 网络篇]]></title>
    <link href="http://RaoZiJian.github.io/blog/2014/09/10/blog-2/"/>
    <updated>2014-09-10T10:22:52+08:00</updated>
    <id>http://RaoZiJian.github.io/blog/2014/09/10/blog-2</id>
    <content type="html"><![CDATA[<h1>Cocos2d-x 网络Http篇</h1>

<p>谈到Cocos2d-x中的Http网络编程，它的基本流程是:</p>

<ol>
<li>创建HttpRequest</li>
<li>创建setResponseCallback()回调函数来设置如何对请求回复后的信息进行操作</li>
<li>通过HttpClient发送HttpRequest请求</li>
</ol>


<p>因此，你首先要知道3个类:</p>

<ul>
<li>HttpRequest</li>
<li>HttpResponse</li>
<li>HttpClient</li>
</ul>


<p>了解了它们之后再来看引擎<code>cpp-test</code>中的<code>cpp-test/Classes/ExtensionsTest/NetworkTest/HttpClientTest</code>，就能对Cocos2d-x中Http的用法基本了解了。</p>

<!-- more -->


<h2>HttpRequest</h2>

<p>顾名思义，它将处理向Http的发出请求，即将用户的请求内容信息给封装到HttpRequest对象当中。目前的话，支持以下几种类型的HttpRequest</p>

<pre><code>/** Use this enum type as param in setReqeustType(param) */
enum class Type
{
    GET,
    POST,
    PUT,
    DELETE,
    UNKNOWN,
};
</code></pre>

<p>其中UNKNOWN类型是它的初始化默认类型，这个在它的构造函数中可以看到，需要注意的是，由于线程不安全的问题，不要将<code>HttpRequest</code>放到自动回收池当中去，这可能会导致崩溃。</p>

<pre><code>/** Constructor
    Because HttpRequest object will be used between UI thead and network thread,
    requestObj-&gt;autorelease() is forbidden to avoid crashes in AutoreleasePool
    new/retain/release still works, which means you need to release it manually
    Please refer to HttpRequestTest.cpp to find its usage
 */
HttpRequest()
{
    _requestType = Type::UNKNOWN;
    _url.clear();
    _requestData.clear();
    _tag.clear();
    _pTarget = nullptr;
    _pSelector = nullptr;
    _pCallback = nullptr;
    _pUserData = nullptr;
};
</code></pre>

<p>通过这个构造函数，我们也可以看到HttpRequest的一些属性，这些protected的属性在HttpRequest中的定义如下，可以通过注释来简单的了解下它们的作用。</p>

<pre><code>protected:
 // properties
    Type                        _requestType;    /// kHttpRequestGet, kHttpRequestPost or other enums
    std::string                 _url;            /// target url that this request is sent to
    std::vector&lt;char&gt;           _requestData;    /// used for POST
    std::string                 _tag;            /// user defined tag, to identify different requests in response callback
    Ref*                        _pTarget;        /// callback target of pSelector function
    SEL_HttpResponse            _pSelector;      /// callback function, e.g. MyLayer::onHttpResponse(HttpClient *sender, HttpResponse * response)
    ccHttpRequestCallback       _pCallback;      /// C++11 style callbacks
    void*                       _pUserData;      /// You can add your customed data here 
    std::vector&lt;std::string&gt;    _headers;             /// custom http headers
</code></pre>

<p>这些属性中，<code>_requestType</code>，<code>_url</code>，<code>_requestData</code>，<code>_tag</code>，<code>_pTarget</code>，<code>_headers</code>都有get/set方法可以找到，这些也是比较常用到的属性。</p>

<p><code>_pSelector</code>指的是发送请求后的回调函数，<code>_pTarget</code>是它的回调函数的作用对象，如下所示：</p>

<pre><code>CC_DEPRECATED_ATTRIBUTE inline void setResponseCallback(Ref* pTarget, SEL_HttpResponse pSelector)
{
    _pTarget = pTarget;
    _pSelector = pSelector;

    if (_pTarget)
    {
        _pTarget-&gt;retain();
    }
}
</code></pre>

<p>可以看到，目前旧的<code>setResponseCallback</code>已经被废弃了，这是现在由于我们有了新的支持C++11类型的回调函数，现在这个回调函数将指向<code>_pCallback</code>，它是一个<code>ccHttpRequestCallback</code>类，它的定义如下：</p>

<pre><code>typedef std::function&lt;void(HttpClient* client, HttpResponse* response)&gt; ccHttpRequestCallback;
</code></pre>

<p><code>_pCallback</code>在HttpRequest类中担任发送请求后接受的回调函数的责任，它仍然叫做<code>setResponseCallback</code>但是已经是C++11类型的回调函数了:</p>

<pre><code>inline void setResponseCallback(const ccHttpRequestCallback&amp; callback)
{
    _pCallback = callback;
}
</code></pre>

<p>OK!<code>HttpRequest</code>的类的属性和接口的用法和含义大致上就是这样。</p>

<h2>HttpResponse</h2>

<p>与HttpRequest相反，HttpResponse存储Http服务器返回的请求，因此它并不需要由用户创建，它将由HttpClient创建并返回，用户只需要知道如何去处理它返回的信息即可。</p>

<p>它的一些基本属性:</p>

<pre><code>protected:
    bool initWithRequest(HttpRequest* request);

    // properties
    HttpRequest*        _pHttpRequest;  /// the corresponding HttpRequest pointer who leads to this response 
    bool                _succeed;       /// to indecate if the http reqeust is successful simply
    std::vector&lt;char&gt;   _responseData;  /// the returned raw data. You can also dump it as a string
    std::vector&lt;char&gt;   _responseHeader;  /// the returned raw header data. You can also dump it as a string
    long                _responseCode;    /// the status code returned from libcurl, e.g. 200, 404
    std::string         _errorBuffer;   /// if _responseCode != 200, please read _errorBuffer to find the reason 
</code></pre>

<p>其中<code>initWithRequest</code>只在内部调用的时候需要用到，用户不需要关心。<code>_pHttpRequest</code>可以通过<code>getHttpRequest()</code>来获得它对用的HttpRequest请求对象，<code>_succeed</code>可以通过<code>isSucceed</code>接口来判定是否请求成功。其余的属性均有get/set方法来获得进行操作。</p>

<h2>HttpClient</h2>

<p>HttpClient是一个单例，它控制着HttpRequest和HttpResponse的收发传递。它有一些公共接口，其中最重要的可能就是对请求的发送了，当然在这之前你得先获得这个单例对象：</p>

<pre><code>/** Return the shared instance **/
static HttpClient *getInstance();

/** Relase the shared instance **/
static void destroyInstance();
/**
 * Add a get request to task queue
 * @param request a HttpRequest object, which includes url, response callback etc.
                  please make sure request-&gt;_requestData is clear before calling "send" here.
 */
void send(HttpRequest* request);

/**
 * Immediate send a request
 * @param request a HttpRequest object, which includes url, response callback etc.
                  please make sure request-&gt;_requestData is clear before calling "sendImmediate" here.
 */
void sendImmediate(HttpRequest* request);
</code></pre>

<p>在这里，<code>send</code>和<code>sendImmediate</code>的区别在于，前者会将HttpRequest排到到request的队列线程的最后，后者则会立刻新建一个线程后发送。除此之外，它还有一些接口对应其它的用途。如<code>get/setTimeoutForConnect</code>可以get/set连接的超时时间，<code>get/setTimeoutForRead</code>可以get/set下载的超时时间。</p>

<h2>HttpClientTest</h2>

<p>在了解了相关的3个类之后，我相信现在大部分内容你应该已经了解了，现在来看一下cpp-test中的http流程是怎么写的，你就基本上大致了解它的使用过程了。更多的内容，可以在<code>cpp-test/Classes/ExtensionsTest/NetworkTest/HttpClientTest</code>看到</p>

<pre><code>void HttpClientTest::onMenuDeleteTestClicked(Ref *sender, bool isImmediate)    // test 1
    {
        HttpRequest* request = new (std::nothrow) HttpRequest();
        request-&gt;setUrl("http://just-make-this-request-failed.com");
        request-&gt;setRequestType(HttpRequest::Type::GET);
        request-&gt;setResponseCallback(CC_CALLBACK_2(HttpClientTest::onHttpRequestCompleted, this));
        if (isImmediate)
        {
            request-&gt;setTag("GET immediate test1");
            HttpClient::getInstance()-&gt;sendImmediate(request);
        }else
        {
            request-&gt;setTag("GET test1");
            HttpClient::getInstance()-&gt;send(request);
        }
        request-&gt;release();
    }
    }
</code></pre>

<p>上面的代码，创建了一个HttpRequest的对象，设置了它的一些信息：Url，RequestType，ResponseCallback的回调和tag。接着通过HttpClient将这个请求发送出去，在这里它通过一个<code>isImmediate</code>来判断它是否是立刻发送。最后由于是new出来的对象，它又手动release了一遍。下面的代码展示了这个请求结束后的回调函数。</p>

<pre><code>void HttpClientTest::onHttpRequestCompleted(HttpClient *sender, HttpResponse *response)
{
    if (!response)
    {
        return;
    }

    // You can get original request type from: response-&gt;request-&gt;reqType
    if (0 != strlen(response-&gt;getHttpRequest()-&gt;getTag())) 
    {
        log("%s completed", response-&gt;getHttpRequest()-&gt;getTag());
    }

    long statusCode = response-&gt;getResponseCode();
    char statusString[64] = {};
    sprintf(statusString, "HTTP Status Code: %ld, tag = %s", statusCode, response-&gt;getHttpRequest()-&gt;getTag());
    _labelStatusCode-&gt;setString(statusString);
    log("response code: %ld", statusCode);

    if (!response-&gt;isSucceed()) 
    {
        log("response failed");
        log("error buffer: %s", response-&gt;getErrorBuffer());
        return;
    }

    // dump data
    std::vector&lt;char&gt; *buffer = response-&gt;getResponseData();
    log("Http Test, dump data: ");
    for (unsigned int i = 0; i &lt; buffer-&gt;size(); i++)
    {
        log("%c", (*buffer)[i]);
    }
    log("\n");
    if (response-&gt;getHttpRequest()-&gt;getReferenceCount() != 2)
    {
        log("request ref count not 2, is %d", response-&gt;getHttpRequest()-&gt;getReferenceCount());
    }
}
</code></pre>

<p>这段函数中，处理了请求之后返回的HttpReponse对象的数据，并将对应信息一一打印。</p>

<h2>安卓</h2>

<p>需要注意的是，如果你是Android环境，不要忘了在您的应用程序的Manifest中增加相应的权限：</p>

<pre><code>&lt;uses-permission android:name=”android.permission.INTERNET” /&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog_1]]></title>
    <link href="http://RaoZiJian.github.io/blog/2014/09/07/blog-1/"/>
    <updated>2014-09-07T10:38:04+08:00</updated>
    <id>http://RaoZiJian.github.io/blog/2014/09/07/blog-1</id>
    <content type="html"><![CDATA[<h1>如何利用Question2Answer创建QA库</h1>

<p>这几天由于工作原因需要搭建一个Cocos2d0x的QA库，一开始打算放在我自己的博客，以博文的形式（大家可以看到我的博文里已经有一些QA的文章了）。后来老板告诉我有一个这样的<a href="http://www.question2answer.org/">Question2Answer</a>的框架，我浏览了一下，觉得是很很不错，又是开源免费的，于是花了1天时间把它搭建出来，大家可以看看效果<a href="http://zaojiahua.com.id39920.hklin1.doctoryun.net/question2answer/index.php?qa=questions&amp;start=0">Cocos2d-x QA库</a>，整个是类似于stackoverflow的形式，不管怎么样，比起我这些简短的博文来说肯定是更高大上了，在这里就把创建这个QA库的过程整理一下，作为自己的知识财富，也分享给有同样需求的朋友参考。</p>

<!-- more -->


<h2>本地环境部署测试</h2>

<p>我的本地搭建环境：Mac、Mamp、Q2A</p>

<p>我用的是Mac系统，在部署到服务器上去前，我先在本地搭建了测试了一遍，我建议大家也用这个方式，免得出现问题浪费自己服务器的空间。Q2A这个框架，或者说模板，它的环境需求是 PHP + MySQL。我在本地测试搭建使用了<a href="http://www.mamp.info/en/">Mamp</a>，它集成了Macintosh + Apache + MySQL + PHP。Windows上给大家推荐<a href="https://www.apachefriends.org/index.html">Xampp</a>。下面是具体的大的具体步骤：</p>

<ol>
<li>下载Mamp，<a href="http://www.mamp.info/en/downloads/">点击这里下载</a></li>
<li>下载Q2A框架，<a href="http://www.question2answer.org/question2answer-latest.zip">点击这里下载</a></li>
<li>安装并配置Mamp</li>
<li>进入Mamp主页，创建MySql的本地数据库</li>
<li>解压Q2A框架，修改它的配置文件，将其连接到Mamp的本地MySql库上</li>
<li>将整个Q2A框架复制到Mamp的Web根目录，也就是htdocs文件夹下</li>
<li>启动Mamp服务，进入Q2A，第一次进入会自动进行数据表的创建和基础数据导入</li>
<li>选择Q2A的插件进行安装，包括语言包，主题选择，内置编辑器等等</li>
</ol>


<p>接下来会解释以上步骤3-8：</p>

<h3>3. 安装并配置Mamp</h3>

<p>下载后安装，启动Mamp，这里用Mamp就足够了，无需去使用Mamp Pro。
<img src="http://cocos2d-xqa.qiniudn.com/Blog_Mamp.png" alt="" /></p>

<p>点击Preferneces进去，看一些设置，这里基本用默认的设置就可以了，稍微扫一眼端口是8888，还有它的文档的根路径即可，留个印象。
<img src="http://cocos2d-xqa.qiniudn.com/Blog_Mamp2.png" alt="" /></p>

<h3>4. 进入Mamp主页，创建MySql的本地数据库</h3>

<p>点击Start Servers启动服务器
<img src="http://cocos2d-xqa.qiniudn.com/Blog_Mamp3.png" alt="" /></p>

<p>启动服务器后，就可以点击Open Start Page进入主页了，一般情况下它也会自动打开主页。在主页点击phpMyAdmin进入MySql数据库的配置。</p>

<p><img src="http://cocos2d-xqa.qiniudn.com/Blog_Mamp4.png" alt="" /></p>

<p>进入数据库的主页，新建一个数据库，记住在这里可以看到你数据库的名称跟服务器地址，</p>

<p><img src="http://cocos2d-xqa.qiniudn.com/Blog_Mamp5.png" alt="" /></p>

<h3>5. 解压Q2A框架，修改它的配置文件，将其连接到Mamp的本地MySql库上</h3>

<p>解压下载好的Q2A框架的文件，将其配置文件<code>qa-config-example.php</code>重命名为<code>qa-config.php</code></p>

<p><img src="http://cocos2d-xqa.qiniudn.com/Blog_Q2A.png" alt="" /></p>

<p>打开<code>qa-config.php</code>，找到以下数据库配置的部分代码，将其改成你的数据库配置数据，下图是我的</p>

<p><img src="http://cocos2d-xqa.qiniudn.com/Blog_Q2A1.png" alt="" /></p>

<h3>6. 将整个Q2A框架复制到Mamp的Web根目录，也就是htdocs文件夹下</h3>

<p>还记得一开始说的Mamp的文档根路径么，将整个<code>question2answer</code>拷贝进去，我的是在Mamp的htdocs文件夹下面</p>

<p><img src="http://cocos2d-xqa.qiniudn.com/Blog_Q2A2.png" alt="" /></p>

<h3>7. 启动Mamp服务，进入Q2A，第一次进入会自动进行数据表的创建和基础数据导入</h3>

<h3>8. 选择Q2A的插件进行安装，包括语言包，主题选择，内置编辑器等等</h3>

<p>在question2answer的官方主页中可以找到<a href="http://www.question2answer.org/addons.php">Add-on</a>的选项，里面包含了大量的第三方插件，主要有这几种类型：</p>

<ul>
<li>语言插件</li>
<li>主题插件</li>
<li>编辑器插件</li>
<li>各类控件插件</li>
<li>UI插件</li>
<li>各类其它插件</li>
</ul>


<p>由于种类繁多，这里就不一一列举出各类插件如何使用了，英语好的朋友自己去看如何使用，不懂的同学可以直接留言问我。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QA_List_1]]></title>
    <link href="http://RaoZiJian.github.io/blog/2014/08/29/qa-03/"/>
    <updated>2014-08-29T10:32:20+08:00</updated>
    <id>http://RaoZiJian.github.io/blog/2014/08/29/qa-03</id>
    <content type="html"><![CDATA[<h4>Question 1: Cocos2dx编译错误Symbol(s) not found for architecture armv7</h4>

<pre><code>使用版本：3.0，3.1，3.2
运行环境：Mac OS 10.9.3    
开发环境：Xcode 5.1
出现问题：Other Linker Flags中增加-ObjC选项会出现如下编译错误。

(null): "_GCControllerDidDisconnectNotification", referenced from:

(null): -[GCControllerConnectionEventHandler observerConnection:disconnection:] in libcocos2dx iOS.a(CCController-iOS.o)

(null): "_GCControllerDidConnectNotification", referenced from:

(null): -[GCControllerConnectionEventHandler observerConnection:disconnection:] in libcocos2dx iOS.a(CCController-iOS.o)

(null): "_OBJC_CLASS_$_GCController", referenced from:

(null): Objc-class-ref in libcocos2dx iOS.a(CCController-iOS.o)

(null): (maybe you meant: _OBJC_CLASS_$_GCControllerConnectionEventHandler)

(null): Symbol(s) not found for architecture armv7

(null): Linker command failed with exit code 1 (use -v to see invocation)
</code></pre>

<!-- more -->


<h4>Answer 1: 出现Symbol(s) not found for architecture armv7的错误警告，表示某些类没有被编译到动态库中；可能是对应文件不存在或没找到，或者是没有被加入到XCode工程中，先检查一下你的CCController-iOS.mm文件有没有问题。</h4>

<p><a href="http://www.cocoachina.com/bbs/read.php?tid=225796&amp;page=1#1039042">参考链接</a></p>

<hr />

<h4>Question 2: 序列帧动画占用的内存太大，如何使用schedule相似功能？</h4>

<h4>Answer 2: 序列帧动画的确是把所需要的纹理都加载到内存，然后开始播放的，这是用空间换时间的的方案。如果你觉得占用内存过大，那么使用schedule也是可以使实现相似的效果，但是你需要自己实现一套纹理管理机制，在调用所需要的纹理前加载它到内存，同时释放不需要的纹理。</h4>

<p><a href="http://www.cocoachina.com/bbs/read.php?tid=225804&amp;page=1#1038988">参考链接</a></p>

<hr />

<h4>Question 3: Vec2跟Point有什么区别?</h4>

<h4>Answer 3: 在引擎3.2中，Vec2和Point没有区别，Point是Vec2的别名；在引擎之前的版本Point曾是一个类,参考math/Vec2.h文件。</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>typedef Vec2 Point</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.cocoachina.com/bbs/read.php?tid=225789&amp;page=1#1038882">参考链接</a></p>

<hr />

<h4>Qustion 4: 关于受batchNode管理的子节点添加粒子报错的问题？</h4>

<h4>Answer 4: 3.0以后的引擎支持auto-batching，你也可以不用batchNode来管理子节点Sprite，试试直接加粒子效果,关于auto-batching 这里有篇文章不错，供你参考, <a href="http://blog.csdn.net/musicvs/article/details/28226299">点击链接</a></h4>

<hr />

<h4>Question 5: 如何在Android下调试C++代码？</h4>

<h4>Answer 5: 可以使用DS-5，Android NDK 的完美搭档DS-5，ARM Development Studio 5 (DS-5™) 社区版使 Android 本地开发工具提升到新的水平。DS-5 CE 作为 Eclipse 的插件发布，它包括在 Android 调试桥 (adb) 上构建的全面 C、C++ 和汇编图形调试器、软件性能分析器和系统分析器（包括 ARM® Mali™ GPU 支持）以及指导您完成开发周期的一整套资源，完善了重要应用程序开发工具包。但是使用DS-5调试Cocos2d-x的C++代码，还需要引擎做一些调整（根据DS-5的要求），目前3.2的版本还未集成这个功能，各位要稍等了。</h4>

<p><a href="http://arm.com/zh/products/tools/software-tools/ds-5/community-edition/index.php">DS-5官方链接</a></p>

<hr />

<h4>Question 6: addEventListenerWithSceneGraphPriority第二个参数好像没啥用?</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void EventDispatcher::addEventListenerWithSceneGraphPriority(EventListener* listener, Node* node)
</span><span class='line'>{
</span><span class='line'>    CCASSERT(listener && node, "Invalid parameters.");
</span><span class='line'>    CCASSERT(!listener-&gt;isRegistered(), "The listener has been registered.");
</span><span class='line'>    
</span><span class='line'>    if (!listener-&gt;checkAvailable())
</span><span class='line'>        return;
</span><span class='line'>    
</span><span class='line'>    listener-&gt;setAssociatedNode(node);
</span><span class='line'>    listener-&gt;setFixedPriority(0);
</span><span class='line'>    listener-&gt;setRegistered(true);
</span><span class='line'>    
</span><span class='line'>    addEventListener(listener);
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h4>Answer 6: 有用的，getAssociatedNode()在很多地方被调用，当你移除这个节点的时候，绑定到节点上的事件监听器也就移除了。所以不是没用哦。 比如</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>inline void setAssociatedNode(Node* node) { _node = node; };
</span><span class='line'>
</span><span class='line'>inline Node* getAssociatedNode() const { return _node; };
</span><span class='line'>
</span><span class='line'>// Pauses all listeners which are associated the specified target. 
</span><span class='line'>void pauseEventListenersForTarget(Node* target, bool recursive = false);
</span><span class='line'>    
</span><span class='line'>//Resumes all listeners which are associated the specified target. 
</span><span class='line'>void resumeEventListenersForTarget(Node* target, bool recursive = false);
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>Question 7: Cocos2d-x 3.x无法重写Node::draw()方法？</h4>

<h4>Answer 7: Cocos2d-x 从v3.0开始将Node::draw()方法标记为final（参见cocos2d/2d/CCNode.h），引擎另外提供了</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>virtual void draw(Renderer *renderer, const Mat4& transform, uint32_t flags);</span></code></pre></td></tr></table></div></figure>


<h4>可以通过重写这个函数来绘制你自己的节点，需注意的是如果更改了任何的GL状态，在使用完后必须还原。</h4>

<hr />

<h4>Question 8: 使用ClippingNode，为什么在Android/iOS裁剪显示错误，或者背景变为绿色？</h4>

<h4>Answer 8: 未开启OpenGL深度缓存，解决方法如下：</h4>

<ul>
<li>iOS：在AppController.mm修改</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>EAGLView *__glView = [EAGLView viewWithFrame: [window bounds]
</span><span class='line'>                                 pixelFormat: kEAGLColorFormatRGBA8
</span><span class='line'>                                 depthFormat: GL_DEPTH24_STENCIL8_OES
</span><span class='line'>                          preserveBackbuffer: NO
</span><span class='line'>                                  sharegroup: nil
</span><span class='line'>                               multiSampling: NO
</span><span class='line'>                             numberOfSamples: 0];</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Android：在AppActivity.java修改</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class AppActivity extends Cocos2dxActivity {
</span><span class='line'>
</span><span class='line'>        public Cocos2dxGLSurfaceView onCreateView() {
</span><span class='line'>          Cocos2dxGLSurfaceView glSurfaceView = new Cocos2dxGLSurfaceView(this);
</span><span class='line'>      // TestCpp should create stencil buffer
</span><span class='line'>          glSurfaceView.setEGLConfigChooser(5, 6, 5, 0, 16, 8);
</span><span class='line'>
</span><span class='line'>       return glSurfaceView;
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<hr />

<h4>Question 9: Cocos2dx 3.x Button 按钮禁用状态无用？</h4>

<h4>Answer 9: 如果是使用的cocos2d-x中的Menu来作为按钮，3.0禁用Menu点击事件的函数是<code>setEnabled(false)</code>，但是如果是用Cocostudio UI做得按钮需要调用<code>button-&gt;setBright(false)</code> 和 <code>button-&gt;setTouchEnabled(false)</code>;</h4>

<hr />

<h4>Quetion 10: 2.2.3版本Cocos2d-x用户的数据存储突然失败。</h4>

<h4>Answer 10:把Debug.win32文件夹下的UserDefault.xml删了就好了，它重新生成一个新的，这回可以存储了。</h4>

<p><a href="http://www.cocoachina.com/bbs/read.php?tid=225597">参考链接</a></p>

<hr />

<h4>Question 11: Cocos2dx里的时间调度函数schedul不是只能传递参数为（float dt）的函数吗？如何传递参数除了float dt外还有其他的参数的函数？</h4>

<h4>Answer 11: cocos2d-x 3.0使用了c++11的新特性std::bind，所以我们就可以用这个东西做很多很多的事了。我们可以将要回调的update函数多加上你要的几个参数，但是schedule中得要求函数的参数个数是一个float类型，所以就用bind吧。这里用到的CC_CALLBACK_1宏底层就是用bind实现的，通过这种绑定的方法就可以实现在schedule中传递多个参数的效果。</h4>

<p><a href="http://www.cocoachina.com/bbs/read.php?tid=181100">参考链接</a></p>

<hr />

<h4>Question 12: 开发Cocos2d-x程序，在Mac和Win上搭建环境分别可以开发什么平台的程序？</h4>

<h4>Answer 12: win环境可以生成在win平台跑的exe程序和Android下的.apk包。Mac下可以生成Mac下运行的程序和打包出Android和IOS的包。</h4>

<hr />

<h4>Question 13: 使用Cocos2d-x 2.x或者3.x版本，vs如何添加Cocos2d-x模板插件？</h4>

<h4>Answer 13: Cocos2d-x从2.2版本开始在win下创建项目工程的时候就不再使用vs模板插件了，推荐2.2版本使用Python脚本创建，在E:\cocos2d-x-2.2\cocos2d-x-2.2\tools\project-creator目录下运行create_project.py脚本。3.x以后使用cocos命令，关于cocos命令的使用参考<a href="http://www.cocos2d-x.org/wiki/How_to_Start_A_New_Cocos2D-X_Game">官方教程</a>。</h4>

<hr />

<h4>Question 14: SetGlobalZOrder和SetPositionZ有什么区别？</h4>

<h4>Answer 14: globalZOrder是用于渲染器中用来给“绘制命令”排序的，localZOrder是用于父节点的子节点数组中给节点对象排序的。localZorder就是在addChild的时候添加的第二个参数，指定子节点在父节点中的层级关系。如果把整个场景看成一个节点，那么GlobalZOrder就是在这个大节点中的层级。</h4>

<p><a href="http://blog.csdn.net/star530/article/details/24576057">参考链接</a></p>

<hr />

<h4>Question 15: Cocos2d-x随机数如何使用？</h4>

<h4>Answer 15: 设置随机数可以选择c++中rand函数，也可以使用Cocos2d-x中的宏CCRANDOM_0_1,不过都需要设置一下随机数，不如使用arc4random，不需要自己设置随机数，就可以做到真正的随机。</h4>

<p><a href="http://www.cocoachina.com/bbs/read.php?tid=226037&amp;fpage=2">参考链接</a></p>

<hr />

<h4>Question 16: cocos2dx 3.0 实现监听Android返回键要怎么弄？</h4>

<h4>Answer 16: 该功能的实现通过使用3.x以后的事件监听就可以，注册EventListenerKeyboard事件，在onKeyReleased回调函数中，判断按键的类型，如果是KEY_RETURN，KEY_ESCAPE，KEY_BACKSPACE就进行逻辑的处理，最后将该事件监听器添加到分发器中。</h4>

<hr />

<h4>Question 17: SimpleAudioEngine在Windows平台上卡顿严重，无法调节音量？</h4>

<h4>Answer 17: SimpleAudioEngine是分平台实现的，Windows平台上部分API是空实现（比如preloadBackgroundMusic等等）,所以在Windows平台上并不提供预加载，调节音量等功能（参见cocos/audio/win32/SimpleAudioEngine.cpp），移植到Android/iOS/Mac上就正常了。Windows上调节音量有网友提供了解决方案。</h4>

<p><a href="http://www.cocoachina.com/bbs/read.php?tid=213345">参考链接</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在安卓上给应用程序设置透明背景 JavaActivity篇]]></title>
    <link href="http://RaoZiJian.github.io/blog/2014/08/28/QA-02/"/>
    <updated>2014-08-28T00:00:00+08:00</updated>
    <id>http://RaoZiJian.github.io/blog/2014/08/28/QA-02</id>
    <content type="html"><![CDATA[<h3>Question: 对于JavaActivity如何在安卓上给应用程序设置透明背景？</h3>

<h4>之前发过一篇<a href="http://raozijian.github.io/blog/2014/08/28/QA-01/">如何在安卓上给应用程序设置透明背景 NativeActivity篇</a>，但是由于3.0rc0后Cocos2d-x更改为Java Activity，而不再是Native Activity，使得这种方法失效。</h4>

<p><img src="http://cocos2d-xqa.qiniudn.com/8.png" alt="" /></p>

<!-- more -->


<h4>修改的东西不多。主要有3步。</h4>

<ul>
<li>第一步：在AndroidManifest.xml中设置Activity背景透明</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>android:theme=&quot;@android:style/Theme.Translucent.NoTitleBar.Fullscreen&quot;
</span></code></pre></td></tr></table></div></figure>


<p> xml</p>

<p><img src="http://cocos2d-xqa.qiniudn.com/9.png" alt="" /></p>

<ul>
<li><p>第二步：在libcocos2dx项目的org.cocos2dx.lib项目中的Cocos2dxActivity.java文件中，修改init()方法。</p>

<p>  增加如下代码：</p>

<pre><code class="`` cpp">
  this.mGLSurfaceView.setZOrderOnTop(true);
  this.mGLSurfaceView.getHolder().setFormat(PixelFormat.TRANSLUCENT);
  this.mGLSurfaceView.setEGLConfigChooser(8,8,8,8,16,0);
</code></pre>

<p>  删除如下代码:（如果不删除的话，顶部会有一个Cocos2dxEditText的白条，Cocos2dxEditText封装了EditText，主要用于TextField，如果程序中有使用到它，那建议更换为EditBox）</p>

<pre><code class="`` cpp">
  /mFrameLayout.addView(edittext);
  //this.mGLSurfaceView.setCocos2dxEditText(edittext);
</code></pre>

<p>  <img src="http://cocos2d-xqa.qiniudn.com/10.png" alt="" /></p></li>
<li><p>第三步：在libcocos2dx项目的org.cocos2dx.lib项目中的Cocos2dxRenderer.java文件中，修改onSurfaceCreated()方法。</p>

<p>  增加如下代码：</p>

<pre><code class="`` cpp">
  pGL10.glDisable(GL10.GL_DITHER);
  pGL10.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT, GL10.GL_FASTEST);
  pGL10.glClearColor(0, 0, 0, 0);
  pGL10.glEnable(GL10.GL_CULL_FACE);
  pGL10.glShadeModel(GL10.GL_SMOOTH);
</code></pre>

<p>  <img src="http://cocos2d-xqa.qiniudn.com/11.png" alt="" /></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在安卓上给应用程序设置透明背景 NativeActivity篇]]></title>
    <link href="http://RaoZiJian.github.io/blog/2014/08/28/QA-01/"/>
    <updated>2014-08-28T00:00:00+08:00</updated>
    <id>http://RaoZiJian.github.io/blog/2014/08/28/QA-01</id>
    <content type="html"><![CDATA[<h3>Question: 对于NativeActivity如何在安卓上给应用程序设置透明背景？</h3>

<h4>以Cocos2d-x 3.0 rc0为例，对于NativeActivity,效果图：</h4>

<p><img src="http://cocos2d-xqa.qiniudn.com/1.png" alt="" /></p>

<!-- more -->


<h4>如果你想让你的activity透明，很简单，只需要4步。</h4>

<ul>
<li>第一步：打开AndroidManifest.xml文件，添加Translucent到</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>android:theme="@android:style/Theme.NoTitleBar.Fullscreen"&gt;</span></code></pre></td></tr></table></div></figure>


<p><img src="http://cocos2d-xqa.qiniudn.com/2.png" alt="" /></p>

<ul>
<li>第二步：打开Cocos2dxActivity.java文件，添加</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>getWindow().setFormat(PixelFormat.TRANSLUCENT);</span></code></pre></td></tr></table></div></figure>


<p><img src="http://cocos2d-xqa.qiniudn.com/3.png" alt="" /></p>

<ul>
<li>第三步：打开cocos2d/cocos/2d/CCDirector.cpp文件，找到setGLDefaultValues()函数，修改最后一个alpha值，范围从0.0f到1.0f。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>glClearColor(0.0f, 0.0f, 0.0f, 1.0f);</span></code></pre></td></tr></table></div></figure>


<p><img src="http://cocos2d-xqa.qiniudn.com/4.png" alt="" />
<img src="http://cocos2d-xqa.qiniudn.com/5.png" alt="" /></p>

<ul>
<li>第四步：打开cocos2d/cocos/2d/platform/android/nativeactivity.cpp，找到engine_init_display(struct engine* engine)函数，修改如下数组</li>
</ul>


<p><img src="http://cocos2d-xqa.qiniudn.com/6.png" alt="" /></p>

<p>修改</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const EGLint attribs[] = {
</span><span class='line'>            EGL_SURFACE_TYPE, EGL_WINDOW_BIT,
</span><span class='line'>            EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,
</span><span class='line'>            EGL_BLUE_SIZE, 5,
</span><span class='line'>            EGL_GREEN_SIZE, 6,
</span><span class='line'>            EGL_RED_SIZE, 5,
</span><span class='line'>            EGL_DEPTH_SIZE, 16,
</span><span class='line'>            EGL_STENCIL_SIZE, 8,
</span><span class='line'>            EGL_NONE
</span><span class='line'>    };</span></code></pre></td></tr></table></div></figure>


<p>成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>const EGLint attribs[] = {
</span><span class='line'>                EGL_SURFACE_TYPE, EGL_WINDOW_BIT,
</span><span class='line'>                EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,  
</span><span class='line'> //EGL_BLUE_SIZE, 5,   --&gt;delete 
</span><span class='line'> //EGL_GREEN_SIZE, 6,  --&gt;delete 
</span><span class='line'> //EGL_RED_SIZE, 5,    --&gt;delete 
</span><span class='line'>                EGL_BUFFER_SIZE, 32,  //--&gt;new field
</span><span class='line'>                EGL_DEPTH_SIZE, 16,
</span><span class='line'>                EGL_STENCIL_SIZE, 8,
</span><span class='line'>                EGL_NONE
</span><span class='line'>        };</span></code></pre></td></tr></table></div></figure>


<p><img src="http://cocos2d-xqa.qiniudn.com/7.png" alt="" /></p>

<p>搞定收工</p>
]]></content>
  </entry>
  
</feed>
